server:
  port: 8080
  contextPath: /
#  servlet:
#    context-path: /

spring:
  servlet:
    multipart.maxFileSize : 10240KB
    multipart.maxRequestSize: 102400KB
  redis:
    # Redis服务器连接端口
    port: 6379
    # Redis服务器地址
    host: 192.168.12.59
    # Redis数据库索引（默认为0）
    database: 0
    # Redis服务器连接密码（默认为空）
    password: Intellifusion@20190108
    # 连接池最大连接数（使用负值表示没有限制）
    jedis.pool.max-active: 8
    # 连接池最大阻塞等待时间（使用负值表示没有限制）
    jedis.pool.max-wait: -1ms
    # 连接池中的最大空闲连接
    jedis.pool.max-idle: 8
    # 连接池中的最小空闲连接
    jedis.pool.min-idle: 0
    # 连接超时时间（毫秒）
    timeout: 5000ms
  kafka:
    bootstrap-servers: 192.168.12.59:9092  # kafka服务地址:1:端口,kafka服务地址2:端口,kafka服务地址3:端口
    producer:
      # 写入失败时，重试次数。当leader节点失效，一个repli节点会替代成为leader节点，此时可能出现写入失败，
      # 当retris为0时，produce不会重复。retirs重发，此时repli节点完全成为leader节点，不会产生消息丢失。
      retries: 0
      #procedure要求leader在考虑完成请求之前收到的确认数，用于控制发送记录在服务端的持久化，其值可以为如下：
      #acks = 0 如果设置为零，则生产者将不会等待来自服务器的任何确认，该记录将立即添加到套接字缓冲区并视为已发送。在这种情况下，无法保证服务器已收到记录，并且重试配置将不会生效（因为客户端通常不会知道任何故障），为每条记录返回的偏移量始终设置为-1。
      #acks = 1 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，如果leader在确认记录后立即失败，但在将数据复制到所有的副本服务器之前，则记录将会丢失。
      #acks = all 这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，记录就不会丢失，这是最强有力的保证，这相当于acks = -1的设置。
      #可以设置的值为：all, -1, 0, 1
#      acks: 1
      # 指定消息key和消息体的编解码方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    consumer:
      group-id: spring-boot-group
      # smallest和largest才有效，如果smallest重新0开始读取，如果是largest从logfile的offset读取。一般情况下我们都是设置smallest
      auto-offset-reset: earliest
      # 设置自动提交offset
      enable-auto-commit: false
      auto-commit-interval: 100
#      max-poll-records: 2
      # 指定消息key和消息体的编解码方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  datasource:
#    username: root
#    password: introcks1234
#    url: jdbc:mysql://192.168.13.77:32000/moe?useUnicode=true&characterEncoding=utf8&useSSL=false
#    driver-class-name: com.mysql.jdbc.Driver
#   多数据源
    dynamic:
      primary: master #设置默认的数据源或者数据源组,默认值即为master
      strict: false #严格匹配数据源,默认false. true未匹配到指定数据源时抛异常,false使用默认数据源
      datasource:
        master:
            username: root
            password: introcks1234
            url: jdbc:mysql://192.168.13.77:32000/moe?useUnicode=true&characterEncoding=utf8&useSSL=false
#            driver-class-name: com.mysql.cj.jdbc.Driver
        test:
            username: root
            password: introcks1234
            url: jdbc:mysql://192.168.13.48:32000/moe?useUnicode=true&characterEncoding=utf8&useSSL=false
#            driver-class-name: com.mysql.cj.jdbc.Driver

mybatis-plus:
  mapper-locations: classpath:mybatis/mapper/*.xml
#  config-location: classpath:mybatis/mybatis.cfg.xml
  type-aliases-package: com.gumo.demo.entity
#showSql
logging:
  level:
    com:
      example:
        mapper : debug

# dev环境下启用Swagger文档
springfox:
  documentation:
    enabled: true

# rabbitmq 配置
rabbitmq:
  mqtt:
    url: tcp://localhost:1883
    username: guest
    password: guest
    defaultTopic: testTopic